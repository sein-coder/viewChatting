<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- DB설정하기! with mybatis -->
	<bean id="realDataSource" 
	class="org.apache.commons.dbcp.BasicDataSource"
	destroy-method="close">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" 
		value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username"
		value="spring"/>
		<property name="password"
		value="spring"/>
	</bean>
	<!-- log를 출력하기 위한 proxy객체를 등록 -->
	<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="realDataSource"/>
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE"/>
				<property name="sqlPrefix" value="[SQL]"/>
			</bean>
		</property>
	</bean>
	
	
	
	<!-- mybatis에서 이용하는 SessioFactory만들기 -->
	<bean id="sessionFactoryBean" 
	class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations"
		value="classpath*:mapper/**/*.xml"/>
		<property name="configLocation"
		value="classpath:mybatis-config.xml"/>
	</bean>
	<!-- 실제로 SqlSession을 생성하는 template객체를 등록 -->
	<bean id="sqlSessionTemplate" 
	class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sessionFactoryBean"/>
	</bean>
	
	<!--트랜잭션 매니져 등록하기  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!--  선언적 방식의 트랜잭션 처리-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!--  트랜잭션 처리할 것 들 써주기 -->
		<tx:attributes>
			<tx:method name="insert*" rollback-for="Exception"/><!--  insert로 시작하는 모든 메소드-->
			<tx:method name="update"/>
			<tx:method name="delete*"/>
		</tx:attributes>
	</tx:advice>
	<!-- 바로 위 선언적 트랜잭션 적은 걸  AOP기능으로 활용하기-->
	<aop:config>
	<!--  앞에 무엇이건 ServiceImpl에 써있는 객체(+.메소드:insert,select) 모든 것 다 -->
		<aop:pointcut expression="execution(* com.kh.spring..*ServiceImpl.*(..)) " id="txpoint"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txpoint"/>
	</aop:config>
	
	<bean id="chatting" class="com.kh.spring.common.chatting.ViewChatting"/>
	<websocket:handlers>
		<websocket:mapping handler="chatting" path="/viewCatting"/>
	</websocket:handlers>
	<bean class="org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean">
	<property name="maxBinaryMessageBufferSize" value="1020400"/>
	</bean>
	
</beans>
